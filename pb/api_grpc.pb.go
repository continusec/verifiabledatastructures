//
//
//Copyright 2017 Continusec Pty Ltd
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VerifiableDataStructuresService_LogAddEntry_FullMethodName         = "/com.continusec.verifiabledatastructures.api.VerifiableDataStructuresService/LogAddEntry"
	VerifiableDataStructuresService_LogFetchEntries_FullMethodName     = "/com.continusec.verifiabledatastructures.api.VerifiableDataStructuresService/LogFetchEntries"
	VerifiableDataStructuresService_LogTreeHash_FullMethodName         = "/com.continusec.verifiabledatastructures.api.VerifiableDataStructuresService/LogTreeHash"
	VerifiableDataStructuresService_LogInclusionProof_FullMethodName   = "/com.continusec.verifiabledatastructures.api.VerifiableDataStructuresService/LogInclusionProof"
	VerifiableDataStructuresService_LogConsistencyProof_FullMethodName = "/com.continusec.verifiabledatastructures.api.VerifiableDataStructuresService/LogConsistencyProof"
	VerifiableDataStructuresService_MapSetValue_FullMethodName         = "/com.continusec.verifiabledatastructures.api.VerifiableDataStructuresService/MapSetValue"
	VerifiableDataStructuresService_MapGetValue_FullMethodName         = "/com.continusec.verifiabledatastructures.api.VerifiableDataStructuresService/MapGetValue"
	VerifiableDataStructuresService_MapTreeHash_FullMethodName         = "/com.continusec.verifiabledatastructures.api.VerifiableDataStructuresService/MapTreeHash"
)

// VerifiableDataStructuresServiceClient is the client API for VerifiableDataStructuresService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VerifiableDataStructuresServiceClient interface {
	LogAddEntry(ctx context.Context, in *LogAddEntryRequest, opts ...grpc.CallOption) (*LogAddEntryResponse, error)
	LogFetchEntries(ctx context.Context, in *LogFetchEntriesRequest, opts ...grpc.CallOption) (*LogFetchEntriesResponse, error)
	LogTreeHash(ctx context.Context, in *LogTreeHashRequest, opts ...grpc.CallOption) (*LogTreeHashResponse, error)
	LogInclusionProof(ctx context.Context, in *LogInclusionProofRequest, opts ...grpc.CallOption) (*LogInclusionProofResponse, error)
	LogConsistencyProof(ctx context.Context, in *LogConsistencyProofRequest, opts ...grpc.CallOption) (*LogConsistencyProofResponse, error)
	MapSetValue(ctx context.Context, in *MapSetValueRequest, opts ...grpc.CallOption) (*MapSetValueResponse, error)
	MapGetValue(ctx context.Context, in *MapGetValueRequest, opts ...grpc.CallOption) (*MapGetValueResponse, error)
	MapTreeHash(ctx context.Context, in *MapTreeHashRequest, opts ...grpc.CallOption) (*MapTreeHashResponse, error)
}

type verifiableDataStructuresServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVerifiableDataStructuresServiceClient(cc grpc.ClientConnInterface) VerifiableDataStructuresServiceClient {
	return &verifiableDataStructuresServiceClient{cc}
}

func (c *verifiableDataStructuresServiceClient) LogAddEntry(ctx context.Context, in *LogAddEntryRequest, opts ...grpc.CallOption) (*LogAddEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogAddEntryResponse)
	err := c.cc.Invoke(ctx, VerifiableDataStructuresService_LogAddEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableDataStructuresServiceClient) LogFetchEntries(ctx context.Context, in *LogFetchEntriesRequest, opts ...grpc.CallOption) (*LogFetchEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogFetchEntriesResponse)
	err := c.cc.Invoke(ctx, VerifiableDataStructuresService_LogFetchEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableDataStructuresServiceClient) LogTreeHash(ctx context.Context, in *LogTreeHashRequest, opts ...grpc.CallOption) (*LogTreeHashResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogTreeHashResponse)
	err := c.cc.Invoke(ctx, VerifiableDataStructuresService_LogTreeHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableDataStructuresServiceClient) LogInclusionProof(ctx context.Context, in *LogInclusionProofRequest, opts ...grpc.CallOption) (*LogInclusionProofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogInclusionProofResponse)
	err := c.cc.Invoke(ctx, VerifiableDataStructuresService_LogInclusionProof_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableDataStructuresServiceClient) LogConsistencyProof(ctx context.Context, in *LogConsistencyProofRequest, opts ...grpc.CallOption) (*LogConsistencyProofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogConsistencyProofResponse)
	err := c.cc.Invoke(ctx, VerifiableDataStructuresService_LogConsistencyProof_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableDataStructuresServiceClient) MapSetValue(ctx context.Context, in *MapSetValueRequest, opts ...grpc.CallOption) (*MapSetValueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MapSetValueResponse)
	err := c.cc.Invoke(ctx, VerifiableDataStructuresService_MapSetValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableDataStructuresServiceClient) MapGetValue(ctx context.Context, in *MapGetValueRequest, opts ...grpc.CallOption) (*MapGetValueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MapGetValueResponse)
	err := c.cc.Invoke(ctx, VerifiableDataStructuresService_MapGetValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableDataStructuresServiceClient) MapTreeHash(ctx context.Context, in *MapTreeHashRequest, opts ...grpc.CallOption) (*MapTreeHashResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MapTreeHashResponse)
	err := c.cc.Invoke(ctx, VerifiableDataStructuresService_MapTreeHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VerifiableDataStructuresServiceServer is the server API for VerifiableDataStructuresService service.
// All implementations must embed UnimplementedVerifiableDataStructuresServiceServer
// for forward compatibility.
type VerifiableDataStructuresServiceServer interface {
	LogAddEntry(context.Context, *LogAddEntryRequest) (*LogAddEntryResponse, error)
	LogFetchEntries(context.Context, *LogFetchEntriesRequest) (*LogFetchEntriesResponse, error)
	LogTreeHash(context.Context, *LogTreeHashRequest) (*LogTreeHashResponse, error)
	LogInclusionProof(context.Context, *LogInclusionProofRequest) (*LogInclusionProofResponse, error)
	LogConsistencyProof(context.Context, *LogConsistencyProofRequest) (*LogConsistencyProofResponse, error)
	MapSetValue(context.Context, *MapSetValueRequest) (*MapSetValueResponse, error)
	MapGetValue(context.Context, *MapGetValueRequest) (*MapGetValueResponse, error)
	MapTreeHash(context.Context, *MapTreeHashRequest) (*MapTreeHashResponse, error)
	mustEmbedUnimplementedVerifiableDataStructuresServiceServer()
}

// UnimplementedVerifiableDataStructuresServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVerifiableDataStructuresServiceServer struct{}

func (UnimplementedVerifiableDataStructuresServiceServer) LogAddEntry(context.Context, *LogAddEntryRequest) (*LogAddEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogAddEntry not implemented")
}
func (UnimplementedVerifiableDataStructuresServiceServer) LogFetchEntries(context.Context, *LogFetchEntriesRequest) (*LogFetchEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogFetchEntries not implemented")
}
func (UnimplementedVerifiableDataStructuresServiceServer) LogTreeHash(context.Context, *LogTreeHashRequest) (*LogTreeHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogTreeHash not implemented")
}
func (UnimplementedVerifiableDataStructuresServiceServer) LogInclusionProof(context.Context, *LogInclusionProofRequest) (*LogInclusionProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogInclusionProof not implemented")
}
func (UnimplementedVerifiableDataStructuresServiceServer) LogConsistencyProof(context.Context, *LogConsistencyProofRequest) (*LogConsistencyProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogConsistencyProof not implemented")
}
func (UnimplementedVerifiableDataStructuresServiceServer) MapSetValue(context.Context, *MapSetValueRequest) (*MapSetValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapSetValue not implemented")
}
func (UnimplementedVerifiableDataStructuresServiceServer) MapGetValue(context.Context, *MapGetValueRequest) (*MapGetValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapGetValue not implemented")
}
func (UnimplementedVerifiableDataStructuresServiceServer) MapTreeHash(context.Context, *MapTreeHashRequest) (*MapTreeHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapTreeHash not implemented")
}
func (UnimplementedVerifiableDataStructuresServiceServer) mustEmbedUnimplementedVerifiableDataStructuresServiceServer() {
}
func (UnimplementedVerifiableDataStructuresServiceServer) testEmbeddedByValue() {}

// UnsafeVerifiableDataStructuresServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VerifiableDataStructuresServiceServer will
// result in compilation errors.
type UnsafeVerifiableDataStructuresServiceServer interface {
	mustEmbedUnimplementedVerifiableDataStructuresServiceServer()
}

func RegisterVerifiableDataStructuresServiceServer(s grpc.ServiceRegistrar, srv VerifiableDataStructuresServiceServer) {
	// If the following call pancis, it indicates UnimplementedVerifiableDataStructuresServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VerifiableDataStructuresService_ServiceDesc, srv)
}

func _VerifiableDataStructuresService_LogAddEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogAddEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableDataStructuresServiceServer).LogAddEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VerifiableDataStructuresService_LogAddEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableDataStructuresServiceServer).LogAddEntry(ctx, req.(*LogAddEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableDataStructuresService_LogFetchEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogFetchEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableDataStructuresServiceServer).LogFetchEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VerifiableDataStructuresService_LogFetchEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableDataStructuresServiceServer).LogFetchEntries(ctx, req.(*LogFetchEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableDataStructuresService_LogTreeHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogTreeHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableDataStructuresServiceServer).LogTreeHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VerifiableDataStructuresService_LogTreeHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableDataStructuresServiceServer).LogTreeHash(ctx, req.(*LogTreeHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableDataStructuresService_LogInclusionProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogInclusionProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableDataStructuresServiceServer).LogInclusionProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VerifiableDataStructuresService_LogInclusionProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableDataStructuresServiceServer).LogInclusionProof(ctx, req.(*LogInclusionProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableDataStructuresService_LogConsistencyProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogConsistencyProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableDataStructuresServiceServer).LogConsistencyProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VerifiableDataStructuresService_LogConsistencyProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableDataStructuresServiceServer).LogConsistencyProof(ctx, req.(*LogConsistencyProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableDataStructuresService_MapSetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapSetValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableDataStructuresServiceServer).MapSetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VerifiableDataStructuresService_MapSetValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableDataStructuresServiceServer).MapSetValue(ctx, req.(*MapSetValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableDataStructuresService_MapGetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapGetValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableDataStructuresServiceServer).MapGetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VerifiableDataStructuresService_MapGetValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableDataStructuresServiceServer).MapGetValue(ctx, req.(*MapGetValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableDataStructuresService_MapTreeHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapTreeHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableDataStructuresServiceServer).MapTreeHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VerifiableDataStructuresService_MapTreeHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableDataStructuresServiceServer).MapTreeHash(ctx, req.(*MapTreeHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VerifiableDataStructuresService_ServiceDesc is the grpc.ServiceDesc for VerifiableDataStructuresService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VerifiableDataStructuresService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.continusec.verifiabledatastructures.api.VerifiableDataStructuresService",
	HandlerType: (*VerifiableDataStructuresServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogAddEntry",
			Handler:    _VerifiableDataStructuresService_LogAddEntry_Handler,
		},
		{
			MethodName: "LogFetchEntries",
			Handler:    _VerifiableDataStructuresService_LogFetchEntries_Handler,
		},
		{
			MethodName: "LogTreeHash",
			Handler:    _VerifiableDataStructuresService_LogTreeHash_Handler,
		},
		{
			MethodName: "LogInclusionProof",
			Handler:    _VerifiableDataStructuresService_LogInclusionProof_Handler,
		},
		{
			MethodName: "LogConsistencyProof",
			Handler:    _VerifiableDataStructuresService_LogConsistencyProof_Handler,
		},
		{
			MethodName: "MapSetValue",
			Handler:    _VerifiableDataStructuresService_MapSetValue_Handler,
		},
		{
			MethodName: "MapGetValue",
			Handler:    _VerifiableDataStructuresService_MapGetValue_Handler,
		},
		{
			MethodName: "MapTreeHash",
			Handler:    _VerifiableDataStructuresService_MapTreeHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
